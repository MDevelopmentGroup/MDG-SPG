<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="spg.generator">
<Super>%Persistent</Super>
<TimeCreated>63416,34167.120781</TimeCreated>

<Method name="CreateDB">
<Description><![CDATA[
from example 
http://localhost:57772/csp/documatic/%25CSP.Documatic.cls?LIBRARY=%25sys&CLASSNAME=%25Library.Persistent&CSPCHD=001000000000nKXcBK2T2y0000iNbZdooKtihpdM4Xu2KP1g--&CSPSHARE=1]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Name:%String</FormalSpec>
<Implementation><![CDATA[
 w !,"hi2all",!
 s ns = $namespace, $namespace="%SYS"
 Set LowName = $ZCVT(Name,"L")

 //Create directories
 s Path = "c:\temp\__"_Name
 s PathDB = Path_"\DB"
 s PathWEB = Path_"\WEB"
 do $zu(140,9,Path)
 do $zu(140,9,PathDB)
 do $zu(140,9,PathWEB)
 
 // Create DataBase File
 s Status=##Class(SYS.Database).CreateDatabase(PathDB)
 i '$$$ISOK(Status) w !,"First Error="_$SYSTEM.Status.GetErrorText(Status)
 s Properties("Directory")=PathDB
 s Properties("MountRequired")=1
 
 // Mount database to Cache
 s Status=##Class(Config.Databases).Create(Name,.Properties)
 i '$$$ISOK(Status) w !,"First Error="_$SYSTEM.Status.GetErrorText(Status)
  s Properties("MountRequired")=1
 s Status=##Class(Config.Databases).Modify(Name,.Properties)
 
 // Create NameSpace
 			Set nsProperties("Globals") = Name
			Set nsProperties("Library") = "CACHELIB"
			Set nsProperties("Routines") = Name
			Set nsProperties("SysGlobals") = "CACHESYS"
			Set nsProperties("SysRoutines") = "CACHESYS"
			Set nsProperties("TempGlobals") = "CACHETEMP"
			Set tSC = ##Class(Config.Namespaces).Create(Name,.nsProperties)
			If $$$ISERR(tSC) throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)
 // Create web apps
 			Set tSC = ##Class(Security.System).Get(,.secProperties)
 			// default
			Set cspProperties("AutheEnabled") = 64 // secProperties("AutheEnabled")
			Set cspProperties("NameSpace") = Name
			Set cspProperties("Path") = PathWEB
			Set cspProperties("IsNameSpaceDefault") = 1
			Set tSC = ##Class(Security.Applications).Create("/web/"_LowName,.cspProperties)
			If $$$ISERR(tSC) throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)

 			// broker
			Set cspProperties("AutheEnabled") = 64
			Set cspProperties("NameSpace") = Name
			Set cspProperties("DispatchClass") = "WEB.Broker"
			Set cspProperties("IsNameSpaceDefault") = 0
			Set tSC = ##Class(Security.Applications).Create("/broker/"_LowName,.cspProperties)
			If $$$ISERR(tSC) throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)
 
 s $namespace=ns 

 Q $$$OK
]]></Implementation>
</Method>

<Method name="CreateClass">
<Description>
Cоздание класса</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>NameSpace</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    //TODO: ПРИМЕРЫ ЗАПРОСОВ
    /*
    data: { namespace: "MDG-DEV",
          nameClass: "Example.Studio",
          Super: "%Persistent,%Populate",
          Abstract: "0",
          Description: "This is TestClass"
          }
    */
    $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
    //zw obj
    set sn = $namespace
    set $namespace = NameSpace //obj.namespace
    set o = ##class(%Dictionary.ClassDefinition).%New(obj.nameClass)
    //Super - тип класса, то что идет после Extends (%Populate,%Persistent, др.классы)
    set o.Super = obj.Super
    //Абстрактный или нет (0 или 1)
    set o.Abstract = obj.Abstract
    //Описание
    set o.Description = obj.Description
    set status = o.%Save() 
    set $namespace = sn
    q $$$OK
]]></Implementation>
</Method>

<Method name="CreateProperty">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
      //TODO: ПРИМЕРЫ ЗАПРОСОВ
      /*
      data: { namespace: "MDG-DEV",
          nameClass: "Example.Studio",
          nameProperty: "test123",
          Type: "%String",
          Relationship: "0",
          Required: "1",
          Calculated: "0"
          }
          */
      $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
      set sn = $namespace
      set $namespace = obj.namespace
      set property=##class(%Dictionary.PropertyDefinition).%New(obj.nameClass)
      set property.Name = obj.nameProperty
      //Описание
      set property.Description = obj.Description
      //Тип свойства (н-р, %Text)
      set property.Type = obj.Type
      //do ##class(MDG.Request).GetParameters()
       // Коллекция (array или list)
      set property.Collection = obj.Collection
      //Отношение (0 или 1)
      set property.Relationship = obj.Relationship
      set property.Required = obj.Required
      set property.Calculated = obj.Calculated
      set property.Parameters = obj.Parameter
      set status=property.%Save()
      set $namespace = sn
      q $$$OK
]]></Implementation>
</Method>

<Method name="Generate">
<ClassMethod>1</ClassMethod>
<FormalSpec>NameSpace,Package</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
      w !,NameSpace," ",Package,!
      do ##class(Template.Spike).CreateCacheMethods(NameSpace,Package)
      q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^spg.generatorD</DataLocation>
<DefaultData>generatorDefaultData</DefaultData>
<IdLocation>^spg.generatorD</IdLocation>
<IndexLocation>^spg.generatorI</IndexLocation>
<StreamLocation>^spg.generatorS</StreamLocation>
<Data name="generatorDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
