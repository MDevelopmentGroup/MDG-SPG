<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="spg.generator">
<Super>%Persistent</Super>
<TimeCreated>63416,34167.120781</TimeCreated>

<Method name="CreateDB">
<Description><![CDATA[
from example 
http://localhost:57772/csp/documatic/%25CSP.Documatic.cls?LIBRARY=%25sys&CLASSNAME=%25Library.Persistent&CSPCHD=001000000000nKXcBK2T2y0000iNbZdooKtihpdM4Xu2KP1g--&CSPSHARE=1]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Name:%String</FormalSpec>
<Implementation><![CDATA[
 // w !,"hi2all",!
 s ns = $namespace, $namespace="%SYS"
 Set LowName = $ZCVT(Name,"L")

 //Create directories
 s Path = "c:\temp\__"_Name
 s PathDB = Path_"\DB"
 s PathWEB = Path_"\WEB"
 do $zu(140,9,Path)
 do $zu(140,9,PathDB)
 do $zu(140,9,PathWEB)
 
 // Create DataBase File
 s Status=##Class(SYS.Database).CreateDatabase(PathDB)
 i '$$$ISOK(Status) w !,"First Error="_$SYSTEM.Status.GetErrorText(Status)
 s Properties("Directory")=PathDB
 s Properties("MountRequired")=1
 
 // Mount database to Cache
 s Status=##Class(Config.Databases).Create(Name,.Properties)
 i '$$$ISOK(Status) w !,"First Error="_$SYSTEM.Status.GetErrorText(Status)
  s Properties("MountRequired")=1
 s Status=##Class(Config.Databases).Modify(Name,.Properties)
 
 // Create NameSpace
 			Set nsProperties("Globals") = Name
			Set nsProperties("Library") = "CACHELIB"
			Set nsProperties("Routines") = Name
			Set nsProperties("SysGlobals") = "CACHESYS"
			Set nsProperties("SysRoutines") = "CACHESYS"
			Set nsProperties("TempGlobals") = "CACHETEMP"
			Set tSC = ##Class(Config.Namespaces).Create(Name,.nsProperties)
			If $$$ISERR(tSC) throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)
 // Create web apps
 			Set tSC = ##Class(Security.System).Get(,.secProperties)
 			// default
			Set cspProperties("AutheEnabled") = 64 // secProperties("AutheEnabled")
			Set cspProperties("NameSpace") = Name
			Set cspProperties("Path") = PathWEB
			Set cspProperties("IsNameSpaceDefault") = 1
			Set tSC = ##Class(Security.Applications).Create("/web/"_LowName,.cspProperties)
			If $$$ISERR(tSC) throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)

 			// broker
			Set cspProperties("AutheEnabled") = 64
			Set cspProperties("NameSpace") = Name
			Set cspProperties("DispatchClass") = "WEB.Broker"
			Set cspProperties("IsNameSpaceDefault") = 0
			Set tSC = ##Class(Security.Applications).Create("/broker/"_LowName,.cspProperties)
			If $$$ISERR(tSC) throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)
 
 s $namespace=ns 

 Q $$$OK
]]></Implementation>
</Method>

<Method name="CreateClass">
<Description>
Cоздание класса</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>NameSpace,obj</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    //TODO: ПРИМЕРЫ ЗАПРОСОВ
    /*
    data: { namespace: "MDG-DEV",
          nameClass: "Example.Studio",
          Super: "%Persistent,%Populate",
          Abstract: "0",
          Description: "This is TestClass"
          }
    */
    //$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
    //zw obj
    set sn = $namespace
    set $namespace = NameSpace //obj.namespace
    set o = ##class(%Dictionary.ClassDefinition).%New(obj.nameClass)
    //Super - тип класса, то что идет после Extends (%Populate,%Persistent, др.классы)
    set o.Super = obj.Super
    //Абстрактный или нет (0 или 1)
    set o.Abstract = obj.Abstract
    //Описание
    set o.Description = obj.Description
    set status = o.%Save() 
    set $namespace = sn
    q $$$OK
]]></Implementation>
</Method>

<Method name="CreateProperty">
<ClassMethod>1</ClassMethod>
<FormalSpec>obj</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
      //TODO: ПРИМЕРЫ ЗАПРОСОВ
      /*
      data: { namespace: "MDG-DEV",
          nameClass: "Example.Studio",
          nameProperty: "test123",
          Type: "%String",
          Relationship: "0",
          Required: "1",
          Calculated: "0"
          }
          */
      //$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
      set sn = $namespace
      set $namespace = obj.namespace
      set property=##class(%Dictionary.PropertyDefinition).%New(obj.nameClass)
      //zw property
      set property.Name = obj.nameProperty
      //Описание
      set property.Description = $ZCONVERT(obj.Description,"I","UTF8")
      //Тип свойства (н-р, %Text)
      //zw property
      set property.Type = obj.Type
      
      //w !,property.Type
      //do ##class(MDG.Request).GetParameters()
       // Коллекция (array или list)
      set property.Collection = obj.Collection
      //Отношение (0 или 1)
      set property.Relationship = obj.Relationship
      set property.Required = obj.Required
      set property.Calculated = obj.Calculated
      // указываем формат даты для корректного хранения
       if (property.Type ="%Date"){ d property.Parameters.SetAt(4,"FORMAT") }
      set status=property.%Save()
      //w !,"propid begin- ",property.%Id()," - end",!
      set $namespace = sn
      q $$$OK
]]></Implementation>
</Method>

<Method name="Generate">
<ClassMethod>1</ClassMethod>
<FormalSpec>NameSpace,Package</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
      w !,NameSpace," ",Package,!
      
      do ##class(Template.Spike).CreateCacheMethods(NameSpace,Package)
      q $$$OK
]]></Implementation>
</Method>

<Method name="Generate2">
<ClassMethod>1</ClassMethod>
<FormalSpec>NameSpace,Package</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
      //создаём БД
      do ..CreateDB(NameSpace)
      w !,"base created"
      
      $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
 		// получаем список классов и создаём их
 		for i=1:1:obj.Size {
			set Class= obj.Oref(i)
			w !,"-  ",Class.Properties.Size," p size = ",Class.Name
            s Class.namespace = NameSpace
            s Class.nameClass = Package_"."_Class.Name
            s Class.Super =  "%Persistent,%Populate"
            s Class.Abstract = "0"
            s Class.Description = "This is auto generated Class by SPG"
			//zw Class
			do ..CreateClass(NameSpace,Class)
		      // получаем список свойств класса
		      for j=1:1:Class.Properties.Size {
			      //zw Property
			      set Property = Class.Properties.Oref(j)
                  s Property.namespace = Class.namespace
                  s Property.nameClass = Class.nameClass
                  s Property.nameProperty = Property.Name
			      //w !,"1"
			      //if (Property.Type ="%Date"){ d Property.Parametr.SetAt("FORMAT",4) }
                  s Property.Relationship = "0"
                  s Property.Required = "0"
                  s Property.Calculated = "0"
                  do ..CreateProperty(Property)
			      
			      //w !,"-- j --",Property.Name,!
 					}
 				}
 do ##class(spg.Spike).CreateCacheMethods(NameSpace,Package) 
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^spg.generatorD</DataLocation>
<DefaultData>generatorDefaultData</DefaultData>
<IdLocation>^spg.generatorD</IdLocation>
<IndexLocation>^spg.generatorI</IndexLocation>
<StreamLocation>^spg.generatorS</StreamLocation>
<Data name="generatorDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
