<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2014.2 (Build 315U)" ts="2014-08-26 16:05:00">
<Class name="WEB.Broker">
<Super>%CSP.REST</Super>
<TimeChanged>63425,50587.861827</TimeChanged>
<TimeCreated>63407,31631.160956</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
 	<Route Url="/createproject/:Name" Method="POST" Call="spg.generator:CreateDB" />
    <Route Url="/createclass/:NameSpace" Method="POST" Call="spg.generator:CreateClass" />
    <Route Url="/createproperty" Method="POST" Call="spg.generator:CreateProperty" />
    <Route Url="/Generate/:NameSpace/:Package" Method="POST" Call="spg.generator:Generate" />
    <Route Url="/Generate2/:NameSpace/:Package" Method="POST" Call="spg.generator:Generate2" />
 
    <Route Url="/namespaces" Method="GET" Call="spg.Request:GetNamespaces" />
    <Route Url="/namespaces/:namespace" Method="GET" Call="spg.Request:GetClassList" />
    <Route Url="/namespaces/:namespace/:classname" Method="GET" Call="spg.Request:GetClass" />
    <Route Url="/namespaces/:namespace/:classname" Method="PUT" Call="spg.Request:PutClass" />
    <Route Url="/updateclass" Method="POST" Call="spg.Request:UpdateClass" />
    <Route Url="/createclass" Method="POST" Call="spg.Request:CreateClass" />
    <Route Url="/compilationclass" Method="POST" Call="spg.Request:CompilationClass" />
    <Route Url="/deleteclass" Method="POST" Call="spg.Request:DeleteClass" />
    <Route Url="/createmethod" Method="POST" Call="spg.Request:CreateMethod" />
    <Route Url="/createproperty" Method="POST" Call="spg.Request:CreateProperty" />
    <Route Url="/getparameter/:type1" Method="GET" Call="spg.Request:GetParameters" />

</Routes>
]]></Data>
</XData>
</Class>




<Project name="mdg-spg" LastModified="2014-08-26 16:04:52.923194">
  <Items>
    <ProjectItem name="spg" type="PKG"></ProjectItem>
    <ProjectItem name="WEB" type="PKG"></ProjectItem>
  </Items>
</Project>


<Class name="spg.Class">
<Super>%Persistent</Super>
<TimeChanged>63425,50750</TimeChanged>
<TimeCreated>63425,50492.166582</TimeCreated>

<Parameter name="%DefaultNameSpace">
<Expression>$namespace</Expression>
</Parameter>

<Method name="%Compile">
<ClassMethod>1</ClassMethod>
<FormalSpec>NameSpace,ClassName</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	zn NameSpace
	set status=$system.OBJ.Compile(ClassName)
	zn ..#%DefaultNameSpace
	Q status
]]></Implementation>
</Method>

<Method name="%CreateClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>NameSpace:%String,ClassName:%String,Extends:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	zn NameSpace
	set status=$$$OK
	//If ('..%CheckClass(ClassName)){
		set class=##class(%Dictionary.ClassDefinition).%New()
		set class.Name=ClassName
		set class.Super=Extends
		set status=class.%Save()
		
	//}
	//Else{
	//	set status=ClassName_" class has already been created"
	//	}
	zn ..#%DefaultNameSpace
	Q status
]]></Implementation>
</Method>

<Method name="%CheckClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>NameSpace,ClassName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	zn NameSpace
	set status=$$$OK
	set status=##class(%Dictionary.ClassDefinition).%Exists(ClassName)
	zn ..#%DefaultNameSpace
	Quit status
]]></Implementation>
</Method>

<Method name="%CreateMethod">
<ClassMethod>1</ClassMethod>
<FormalSpec>NameSpace,ClassName,MethodName,InputList,ReturnType,Code,Description</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	zn NameSpace
	set status=$$$OK
	//If (..%CheckClass(ClassName)){
	//	If ('..%CheckMethod(NameSpace,ClassName,MethodName)){
			set method=##class(%Dictionary.MethodDefinition).%New(ClassName)
			set method.ClassMethod=1
			set method.Name=MethodName
			set method.FormalSpec=InputList
			set method.Implementation=Code
			set method.ReturnType=ReturnType
			set method.Description=Description
			set status=method.%Save()
		//	}
		//Else{
		//		set status=MethodName_" Method has already been created"
		//	}
		//}
	//Else{
	//	set status=ClassName_" Class does not exist"
	//	}
	zn ..#%DefaultNameSpace	

	Quit status
]]></Implementation>
</Method>

<Method name="%CheckMethod">
<ClassMethod>1</ClassMethod>
<FormalSpec>NameSpace,ClassName,MethodName</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	zn NameSpace
	set method=##class(%Dictionary.MethodDefinition).%New(ClassName)
	set status=$$$OK
	set status=method.%Exists(MethodName)
	zn ..#%DefaultNameSpace
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^spg.ClassD</DataLocation>
<DefaultData>ClassDefaultData</DefaultData>
<IdLocation>^spg.ClassD</IdLocation>
<IndexLocation>^spg.ClassI</IndexLocation>
<StreamLocation>^spg.ClassS</StreamLocation>
<Data name="ClassDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>




<Class name="spg.Request">
<Super>%Persistent</Super>
<TimeChanged>63425,50750</TimeChanged>
<TimeCreated>63425,50545.263908</TimeCreated>

<Method name="GetNamespaces">
<Description>
Получение областей</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim tNS As %String
    set str=""
    w "["
    #; Get the list of namespaces
    Do List^%SYS.NAMESPACE(.tList)
    Set tNS="" For  {
        Set tNS=$Order(tList(tNS),1,tValue) If tNS="" {Quit}         
         set str=str_"{""Name"":"""_tNS_"""},"
    }
    w $E(str,1,*-1)
    w "]"
    Quit tSC
]]></Implementation>
</Method>

<Method name="GetClass">
<Description>
Method returns the class text </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String,pClassname:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    set temp=##class(%ZEN.proxyObject).%New()
    #dim tStream As %Stream.Character
    Try {
        Set tSC=##class(%Compiler.UDL.TextServices).GetTextAsStream(pNamespace,pClassname,.tStream)
        If $$$ISERR(tSC) Quit
       // Do tStream.OutputToDevice()
        //w $REPLACE($REPLACE(str,$C(10),"//n"),$C(13),"//r")
        s temp.SourceText=tStream.Read(tStream.Size)
        do temp.%ToJSON()
    } Catch (e) {
        Set tSC=e.AsStatus()
    } 
    Quit tSC
]]></Implementation>
</Method>

<Method name="GetClassList">
<Description>
 Список классов</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>namespace:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 
    set sn = $namespace
    set $namespace = namespace
    set s=##class(%SQL.Statement).%New()
    s sql = "SELECT * FROM %Dictionary.ClassDefinition  where NOT id %STARTSWITH '%' and system <>4"
   set st=s.%Prepare(sql)
   set str = ""
   set rs=s.%Execute()
  w "["
    while rs.%Next() {
          set str = str_ "{""Name"":"""_rs.%Get("ID")_"""},"
}
 w $E(str,1,*-1)
 w "]"
  set $namespace = sn
    q $$$OK
]]></Implementation>
</Method>

<Method name="UpdateClass">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	//TODO: ПРИМЕРЫ ЗАПРОСОВ
    /*
    data: { namespace: "MDG-DEV",
          text: "Class Example.Studio Extends (%Persistent,%Populate)'+'\r\n{'+'\r\n//hgjgjgjgh'+'\r\n}",
          nameClass: "Example.Studio"
          }
    */
         $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
         zn obj.namespace
    set stream=##class(%Stream.GlobalCharacter).%New()
    Do stream.Write(obj.text)
    s st= ##class(%Compiler.UDL.TextServices).SetTextFromStream(obj.namespace, obj.nameClass, stream)
    zw st
    zw stream
    q $$$OK
]]></Implementation>
</Method>

<Method name="CreateClass">
<Description>
Cоздание класса</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    //TODO: ПРИМЕРЫ ЗАПРОСОВ
    /*
    data: { namespace: "MDG-DEV",
          nameClass: "Example.Studio",
          Super: "%Persistent,%Populate",
          Abstract: "0",
          Description: "This is TestClass"
          }
    */
    $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
    //zw obj
    set sn = $namespace
    set $namespace = obj.namespace
    set o = ##class(%Dictionary.ClassDefinition).%New(obj.nameClass)
    //Super - тип класса, то что идет после Extends (%Populate,%Persistent, др.классы)
    set o.Super = obj.Super
    //Абстрактный или нет (0 или 1)
    set o.Abstract = obj.Abstract
    //Описание
    set o.Description = obj.Description
    set status = o.%Save() 
    set $namespace = sn
    q $$$OK
]]></Implementation>
</Method>

<Method name="CompilationClass">
<Description>
Компиляция класса </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
      $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
      zn obj.namespace
     set status=$system.OBJ.Compile(obj.nameClass,,.errorlog)
     w errorlog
     q $$$OK
]]></Implementation>
</Method>

<Method name="DeleteClass">
<Description>
Удаление класса</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
       $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
       zw obj
       zn obj.namespace
      do ##class(%Studio.ClassMgr).Delete(obj.nameClass)
]]></Implementation>
</Method>

<Method name="CreateMethod">
<Description>
Создание метода</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//TODO: ПРИМЕРЫ ЗАПРОСОВ
    	/*
	data: { namespace: "MDG-DEV",
          nameClass: "Example.Studio",
          ClassMethod: "1",
          nameMethod: "AtomIO",
          ReturnType: "%Status",
          Private: "0",
          Final: "1"
          }
          */
    $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
    zn obj.namespace
        set method=##class(%Dictionary.MethodDefinition).%New(obj.nameClass)
        set method.ClassMethod=obj.ClassMethod
        set method.Name=obj.nameMethod
        set method.ReturnType = obj.ReturnType
        set method.Private = obj.Private
        set method.Final = obj.Final
        set status=method.%Save()   
    q $$$OK
]]></Implementation>
</Method>

<Method name="CreateProperty">
<Description>
Создание свойства</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
      //TODO: ПРИМЕРЫ ЗАПРОСОВ
      /*
      data: { namespace: "MDG-DEV",
          nameClass: "Example.Studio",
          nameProperty: "test123",
          Type: "%String",
          Relationship: "0",
          Required: "1",
          Calculated: "0"
          }
          */
      $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
      set sn = $namespace
      set $namespace = obj.namespace
      set property=##class(%Dictionary.PropertyDefinition).%New(obj.nameClass)
      set property.Name = obj.nameProperty
      //Описание
      set property.Description = obj.Description
      //Тип свойства (н-р, %Text)
      set property.Type = obj.Type
      //do ##class(MDG.Request).GetParameters()
       // Коллекция (array или list)
      set property.Collection = obj.Collection
      //Отношение (0 или 1)
      set property.Relationship = obj.Relationship
      set property.Required = obj.Required
      set property.Calculated = obj.Calculated
      set property.Parameters = obj.Parameter
      set status=property.%Save()
      set $namespace = sn
      q $$$OK
]]></Implementation>
</Method>

<Method name="GetParameters">
<Description>
Получение параметров</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type1:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s qqq = "%"_type1
  set s=##class(%Library.ResultSet).%New("%Dictionary.ParameterDefinitionQuery:Summary")
  do s.Execute(qqq)
  set str = ""
  w "["
  while s.Next()
 {      
	 set str = str_ "{""Name"":"""_s.Get("Name")_"""},"
	}
 w $E(str,1,*-1)
 w "]"
  q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^spg.RequestD</DataLocation>
<DefaultData>RequestDefaultData</DefaultData>
<IdLocation>^spg.RequestD</IdLocation>
<IndexLocation>^spg.RequestI</IndexLocation>
<StreamLocation>^spg.RequestS</StreamLocation>
<Data name="RequestDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="spg.SinglepageProjectGenerator">
<Description>
[EN]
Web part of Single page Project Generator
If you export this project from XML and check 'compile', just press F5 to start working
Oterwithe, to start  - comile project by pressing F7, then press F5 in studio
[RU]
Веб часть генерации
Если брокер для данной области не обнаружен - он будет создан
Для начала работы - откомпилируйте проект и нажмите F5 в студии
Для полноценной работы должен быть доступен сайт http://akvant.pro/scrumbler/index.html
На нём хранятся используемые библиотеки или же скачайте и распакуйте
в локальную директорию файл http://akvant.pro/scrumbler/template.zip
указав абсолютный или относительный путь к ней в переменной fullpath</Description>
<Super>%Persistent,%CSP.Page</Super>
<TimeChanged>63425,51767.830924</TimeChanged>
<TimeCreated>63425,43877.404724</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// в текущей области создаём брокера для работы с проектом	

]]></Content>
</UDLText>

<Method name="CreateBroker">
<ClassMethod>1</ClassMethod>
<FormalSpec>broker</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 s ns = $namespace, $namespace="%SYS"
 set st=##class(Security.Applications).Get(broker,.CSP)
 if st '=1 {
  w !,"Создан брокер "_broker_" для области "_ns
  Set cspProperties("AutheEnabled") = 64
  Set cspProperties("NameSpace") = ns
  Set cspProperties("DispatchClass") = "WEB.Broker"
  Set cspProperties("IsNameSpaceDefault") = 0
  Set tSC = ##Class(Security.Applications).Create(broker,.cspProperties)
  If $$$ISERR(tSC) throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)
 }
 s $namespace=ns
]]></Implementation>
</Method>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//TODO: отправить в глобалы или параметры 
	#dim fullpath = "http://akvant.pro/scrumbler/template/"
	#dim broker="/brokerspg777"
	d ..CreateBroker(broker)

	//s fullpath="templ/"
	&html<
<!DOCTYPE html>
<html ng-app="myApp">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>##SPG</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!--<link rel="stylesheet" href="css/app.css"/>-->
    <link href="#(fullpath)#css/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <!--<link href="#(fullpath)#css/bootstrap/css/bootstrap-additions.min.css" rel="stylesheet">-->
</head>
<body>
<!--[if lt IE 7]>
<p class="browsehappy">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
<![endif]-->
<!--
********************************
         Генератор.Начало
********************************
-->
<div ng-controller="MyCtrl2" >
    <style>
        body { padding-top: 100px; }
        .my-input {
            -webkit-transition:all linear 0.5s;
            transition:all linear 0.5s;
            background: transparent;
        }
        .my-input.ng-invalid {
            color:white;
            background: #ff7d15;
        }
    </style>
    <div ng-init="resultIsOk=1;inProgress=1;Properties = [{'Prop':''}]; ClassList = [{'list':[]}]; Classes = [{'Name':'','Properties':[{'Name':'',namespace:'',nameClass:'',Type:'%String',Relationship:'',Required:'',Calculated:'',Description:''}]}];"/>
    <form class="form-horizontal" ng-submit="inProgress=0;GeneratePrj()">
        <div class="form-group" >
            <nav class="navbar navbar-inverse navbar-fixed-top " role="navigation">

                <div class="form-group">
                    <div class="col-lg-12 container">
                        <p class="label label-primary">single page generator on cache side</p>
                        <button class="btn btn-default btn-sm" type="submit">Автогенерация <b>{{ProjectName}}</b></button>
                        <h3 ng-hide="inProgress" class="label label-warning">идёт генерация проекта. пожалуйста подождите</h3>
                        <h3 ng-hide="resultIsOk" class="label label-success">Проект доступен <a href="/web/{{ProjectName}}/index.html" target = "_blank">/web/{{ProjectName}}/index.html</a></h3>
                    </div>
                </div>
            </nav>
            <div class="col-lg-12">
                <!--  <br/><br/><br/>-->
                <label class="col-lg-4" >Название проекта</label>
                <!--/^\(?(\d{3})\)?[ .-]?(\d{3})[ .-]?(\d{4})$/-->
                <!-- http://www.rubular.com/
                допускаются любые буквы, цифры и знак подчёркивания-->
                <input type="text" class="form-control my-input" ng-model="ProjectName" ng-pattern="/^[a-zA-Z]\w*$/" placeholder="Project name" required/>
                <label class="col-lg-4" >Название пакета</label>
                <input type="text" class="form-control my-input" ng-model="PackName" placeholder="Package name" required ng-pattern="/^[a-zA-Z]\w*$/"/>
                <!-- <hr/>-->
            </div>

            <label for="URL" class="col-sm-2 control-label hidden-sm hidden-xs">Классы:</label>
            <div class="col-lg-9">
                <div ng-repeat="Class in Classes">
                    <div class="col-lg-12">
                        <hr></div>
                    <div class="col-lg-6">
                        <input type="text" class="form-control my-input" ng-model="Classes[$index].Name" placeholder="Class name" required ng-pattern="/^[a-zA-Z]\w*$/"/>
                    </div>
                    <div class="col-lg-1">
                        <a class="btn btn-default" href ng-click="Classes.splice($index, 1)"><span class="glyphicon glyphicon-remove"></span> Удалить класс</a>
                    </div>
                    <!-- свойства классов начало-->
                    <div class="form-group">
                        <div class="col-lg-12"><label>Свойства класса {{Class.Name}}:</label></div>
                        <div class="col-lg-9">
                            <div class="col-lg-4" align="center">Название свойства</div>
                            <div class="col-lg-4"align="center">Описание</div>
                            <div class="col-lg-3"align="center">Тип</div>
                            <div ng-repeat="Prop in Class.Properties">
                                <div class="col-lg-4">
                                    <input type="text" class="form-control my-input" ng-model="Prop.Name" placeholder="Property name" required ng-pattern="/^[a-zA-Z]\w*$/"/>
                                </div>
                                <div class="col-lg-4">
                                    <input type="text" class="form-control my-input" ng-model="Prop.Description" placeholder="Описание свойства"/>
                                </div>
                                <div class="col-lg-3">
                                    <select name="PropertyType" class="form-control adminSearchSelAndSelect" ng-model="Prop.Type">
                                        <option value="%String" selected="selected" ng-selected="true">Строка</option>
                                        <option value="%Integer">Число</option>
                                        <option value="%Date">Дата</option>
                                    </select>
                                </div>
                                <div class="col-lg-1">
                                    <a class="btn btn-default" href ng-click="Class.Properties.splice($index, 1)"><span class="glyphicon glyphicon-remove"></span></a>
                                </div>

                            </div>
                            <div class="col-lg-12" align="center">
                                <hr style="margin-top: 5px; margin-bottom: 5px; align-content: flex-end">
                                <a href ng-click="Class.Properties.push({});Console.Log(Class.Properties)"><span class="glyphicon glyphicon-plus"></span>свойство</a>
                            </div>
                        </div>
                    </div>
                    <!-- свойства классов конец-->
                </div>
                <div class="col-lg-12">
                    <hr style="margin-top: 5px; margin-bottom: 5px">
                    <a href ng-click="Classes.push({'Name':'','Properties':[{'Name':'',namespace:'',nameClass:'',Type:'%String',Relationship:'',Required:'',Calculated:'',Description:''}]});Console.Log(Classes)"><span class="glyphicon glyphicon-plus"></span> Класс</a>
                </div>
            </div>
        </div>
    </form>

</div>
<!--
********************************
         Генератор.Конец
********************************
-->
<script src="#(fullpath)#lib/jquery/jquery-2.1.1.min.js"></script>
<script src="#(fullpath)#lib/angular/angular.min.js"></script>
<script src="#(fullpath)#lib/angular/angular-route.min.js"></script>
<script src="#(fullpath)#lib/angular/angular-animate.min.js"></script>
<script src="#(fullpath)#css/bootstrap/js/bootstrap.min.js"></script>
<script language="JavaScript">
    //'use strict';

    angular.module('myApp', [
        'ngRoute',
        'myApp.controllers'
    ]);

</script>
<script language="JavaScript">
    //'use strict';
    /* Controllers */
    angular.module('myApp.controllers', [])
            .controller('MyCtrl2', ['$scope','$http', function($scope,$http) {
                $scope.Generate = function (Data,Name,Pack){$http.post("#(broker)#/Generate2/"+Name+"/"+Pack,Data)
                        .success(function(data){
                            $scope.resultIsOk=0;
                            $scope.inProgress=1;
                            console.log("Финальная генерация произведена ")}).error(function(data,status){
                            console.log("Не генерит :(" + status + data) });
                }

                $scope.resultIsOk=1;
                $scope.GeneratePrj = function(){
                    $scope.resultIsOk=1;
                    $scope.Generate($scope.Classes,$scope.ProjectName,$scope.PackName);
                }

            }]);


</script>
</body>
</html>
	>
	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^spg.SinglepageP3FF7D</DataLocation>
<DefaultData>SinglepageProjectGeneratorDefaultData</DefaultData>
<IdLocation>^spg.SinglepageP3FF7D</IdLocation>
<IndexLocation>^spg.SinglepageP3FF7I</IndexLocation>
<StreamLocation>^spg.SinglepageP3FF7S</StreamLocation>
<Data name="SinglepageProjectGeneratorDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="spg.Spike">
<Super>%Persistent</Super>
<TimeChanged>63425,55176.806934</TimeChanged>
<TimeCreated>63425,50447.406683</TimeCreated>

<Parameter name="%DefaultNameSpace">
<Expression>$namespace</Expression>
</Parameter>

<Method name="GetPath">
<ClassMethod>1</ClassMethod>
<FormalSpec>cspapp</FormalSpec>
<Implementation><![CDATA[

  s ns = $namespace, $namespace="%SYS"
  
  k csp s csp = ##class(Security.Applications).Get(cspapp,.csp)
  
  s $namespace=ns 
  Q $g(csp("Path"))
]]></Implementation>
</Method>

<Method name="GetDefault">
<ClassMethod>1</ClassMethod>
<FormalSpec>targetNS:%String=$namespace</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s defapp = $System.CSP.GetDefaultApp(targetNS)
	//w defapp
	Q defapp
	 
	s ns = $namespace, $namespace="%SYS"
	 	
	 	s rs=##class(%ResultSet).%New("Security.Applications:Detail")
	 	s sc=rs.%Execute("") 
	 	
	 	#define g(%name) $g(rs.Data(%name))
	 	s (cspapp,default) = ""
	 	while rs.%Next() {
			
			s default = $$$g("IsNameSpaceDefault") 	
			s cspapp = $$$g("Name")
			s appns = $$$g("NameSpace")
			//if appns'=targetNS continue
			
			w !,cspapp," -> ",default
			Q:default=1
			
		} d rs.%Close() k rs
	s $namespace=ns
]]></Implementation>
</Method>

<Method name="SaveToFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>filePath:%String,body:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		s fileM=##class(%Stream.FileBinary).%New()
		s fileM.Filename=filePath
		s st=fileM.Write(body)
		s st=fileM.%Save()
		k fileM
 		q $$$OK
]]></Implementation>
</Method>

<Method name="CreateCacheMethods">
<Description>
В случае наличия броекра - подтягивает и его</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>NameSpace,Package,location="C:\InterSystems\Cache\CSP"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		w !,"SPG MOD",!
		#dim fullpath = "http://akvant.pro/scrumbler/template/"
		#dim broker="/brokerspg777"

		s defaultPath = ""
		s ns = $namespace
		if location="C:\InterSystems\Cache\CSP" {
			s location = ..GetPath(..GetDefault(NameSpace)) //_Package
			}
			
		w !,"проект будет записан по пути "_location 
		Set LowName = $ZCVT(NameSpace,"L")
		#dim st as %Status=$$$OK
		
		#dim WebApp As %String= "web/"_LowName //"rest"_Package
		#dim Broker As %String= "broker/"_LowName
		//#dim BootStrapDir As %String="C:\temp\css\"
		//#dim AngularDir As %String="C:\temp\lib"
		#dim TemplPath As %String="C:\temp\templ"
		//#dim LNameSpace As %String=$ZCONVERT(NameSpace,"L")
		#dim jsPath = location_"\js\"
		#dim partPath = location_"\partials\"

		#dim ClassName,FullClassName,Property,XDATA,Controller,Factory,App,index,menu As %String=""
		#define t3 $C(10,9,9,9)
		#define t2 $C(10,9,9)
		#define t1 $C(10,9)
		#define css "<style>.my-input {-webkit-transition:all linear 0.5s; transition:all linear 0.5s; background: transparent;}.my-input.ng-invalid {color:white;background: #ff7d15;}</style>"
		#define div(%name) "<div class='"_%name_"'>"
		#define div2(%name,%body) $$$t1_"<div class='"_%name_"'>"_$$$t3_%body_$$$t2_"</div>"
		#define label(%name) $$$t3_"<label class='col-lg-4 control-label' for='"_%name_"'>"_%name_"</label>"
		#define inputform(%name,%prop,%descr,%typecontrol) $$$div2("form-group",$$$label(%prop)_$$$div2("col-lg-8","<input type='text' id='Comment' class='form-control my-input' ng-model='"_%name_"."_%prop_"' placeholder='"_%descr_"' "_%typecontrol_" >"))
		#define pattern " ng-pattern='/^\d*$/' "
		#define datepicker " data-date-type='string' data-max-date='today' data-autoclose='1' bs-datepicker "
		
		//w !,"***** NS-"_NameSpace," P-",Package," L-",location," jsP-",jsPath,"-"
		s File=##class(%File).%New()
		/*
		Избавляемся от копирования директорий
		//s st=File.CreateDirectory(location_"\"_LNameSpace_"\css\"),st=File.%Save()
		//s st=File.CreateDirectory(location_"\"_LNameSpace_"\lib\"),st=File.%Save()
		s st=File.CopyDir(TemplPath,location,1,1)
		
		s st=File.%Save()
		w st
		*/
		//s st=File.CopyDir(BootStrapDir,location_"\"_LNameSpace_"\css\",1,1),st=File.%Save()
		//s st=File.CopyDir(AngularDir,location_"\"_LNameSpace_"\lib\",1,1),st=File.%Save()
		//костыль
		s st=File.CreateDirectory("c:\temp"),st=File.%Save()
		s st=File.CreateDirectory(jsPath),st=File.%Save()
		s st=File.CreateDirectory(partPath),st=File.%Save()
		k File
 		d ##class(spg.htmlTemplates).GenerateIndex(location_"\index.html",fullpath,Package)
 /*		
		S stream=##class(%FileCharacterStream).%New()
		S stream.Filename=TemplPath_"\index.html"
		//читаем весь файл
		s index="<!DOCTYPE html>"_$C(10)_"<html ng-app='"_Package_"'>"_$C(10)
		S index=index_stream.Read(stream.Size)
		d ..SaveToFile(location_"\index.html",index)
 */		
		s Factory="angular.module('FactoryModule',[])"
		s App="angular.module('"_Package_"',['ngCookies','ngResource','ngRoute','ngSanitize','ngAnimate','mgcrea.ngStrap','FactoryModule'"_$C(10)_
		"]).config(['$routeProvider',  function($routeProvider) { $routeProvider."
		s menu="<ul class='nav nav-pills nav-stacked'>"
		//#dim ClassList As %ArrayOfDataTypes
		s ClassList=##class(spg.Util).%SubClassList(NameSpace,Package),XDATA=$C(9)_"<Routes>"_$C(10)
		// надо ли?
		s temp=##class(%Stream.TmpCharacter).%New()
		f i=0:1:ClassList.Count()-1 {
			w !, "формируем контроллеры"
			s FullClassName=ClassList.GetAt(i)
			s ClassName=$P(ClassList.GetAt(i),".",2)
			s TempCreate=$C(9)_"set st=$$$OK"_$C(10,9)_"try{"_$C(10,9)_
			"$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))"_$C(10)_
 					$C(9)_"set "_ClassName_"=##class("_FullClassName_").%New()"_$C(10)
 					
 					s PropertyList=##class(spg.Util).%ListPropertiesOfClass(NameSpace,FullClassName)	
 					s pl=##class(spg.Util).ListPropertiesOfClass2(NameSpace,FullClassName)	
 					
					s PartialCRUD=$$$css_$c(10)_$$$div("well")_$$$t1_$$$div("row")_$$$t1_$$$div("col-lg-8")_
					$$$t2_"<form class='form-horizontal' ng-model='"_ClassName_"' ng-submit='Submit("_ClassName_")'>"
    					for key=1:1:PropertyList.Count()
    					 
    					{
	    				 s Property=PropertyList.GetAt(key)
	    				 s Property2=pl.GetAt(key)
	    				 s PropertyType = $lg(Property2,2)
	    				 s PropertyDescr = $ZCONVERT($lg(Property2,3),"O","UTF8")
	    				

	    				 	  s Add=""
		    				  s AddP="$ZCONVERT("
		    				  s AddP2=",""I"",""UTF8"")"
	    				 if ($lf(Property2,"%Integer")>0) {
		    				  w !,"!!!INT!!!" 
		    				  s Add=$$$pattern
		    				  }
	    				 
	    				 //elseif ($lf(Property2,"%Date")>0) {
		    			elseif (PropertyType="%Date">0) {	 
		    				 
							  w !,"DATE!!"
							  s Add=$$$datepicker
		    				  s AddP="$ZDATEH("
		    				  s AddP2=",4)"}

	    				 s PartialCRUD=PartialCRUD_$$$inputform(ClassName,Property,PropertyDescr,Add)

 						 //s TempCreate=TempCreate_$C(9)_"set "_ClassName_"."_Property_"=$ZCONVERT(obj."_Property_",""I"",""UTF8"")"_$C(10)
 						 s TempCreate=TempCreate_$C(9)_"set "_ClassName_"."_Property_"="_AddP_"obj."_Property_AddP2_" //cr"_$C(10)

 					     w !, "формируем модифицирующие партиции"			 
 						 }
 						 
 					s PartialCRUD=PartialCRUD_"<div class='form-group'>"_$$$t2_
			  		"<label class='col-lg-4 control-label'></label>"_$$$t2_
			    	"<div class='col-lg-8'>"_$$$t2_
			    	"<button type='submit' class='btn btn-success'>OK</button>"_$$$t2_
			    	"</div>"_$$$t2_
			    	"</div>"
 					s PartialCRUD=PartialCRUD_$$$t2_"</form>"_$$$t2_"</div>"_$$$t2_"</div>"_$$$t1_"</div>"	 
 					d ..SaveToFile(partPath_ClassName_".html",PartialCRUD)

 					s TempCreate=TempCreate_$C(9)_"$$$THROWONERROR(st,"_ClassName_".%Save())"_$C(10)_$C(9)_"} catch ex{set st=ex.AsStatus()}"_$C(10)_$C(9)_"quit st"
 			s st=temp.Write(TempCreate),TempCreate=""
 			s st=##class(spg.Class).%CreateMethod(NameSpace,FullClassName,"Create","","%Status",temp,"Create "_FullClassName), st=temp.Clear()
 			s TempUpdate=$C(9)_"set st=$$$OK"_$C(10)_$C(9)_"try{"_$C(10)_
 					$C(9)_"$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))"_$C(10)_
 					$C(9)_"set "_ClassName_"=##class("_FullClassName_").%OpenId(obj.ID)"_$C(10)
 					 s PropertyList=##class(spg.Util).%ListPropertiesOfClass(NameSpace,FullClassName)
					 
					 s pl=##class(spg.Util).ListPropertiesOfClass2(NameSpace,FullClassName)	

					 s Partial="<div class='col-lg-10'>"_$$$t2_
                		"<input type='text' id='appendedInput'  ng-model='filterApp' placeholder='Search string'>"_$$$t2_
                		"<span class='add-on'><i class='icon-filter'></i></span>"_$C(10)_"</div>"_
					 	"<div class=''>"_$$$t1_
							"<a class='btn btn-success' href='#/Create"_ClassName_"'>Create "_ClassName_"</a>"_$$$t1_
							"<div class='row' ng-repeat='"_ClassName_" in "_ClassName_"s | filter:filterApp'>"_$$$t1_
							"<div class='col-lg-10'>" 
    					for key=1:1:PropertyList.Count()
    					 
    					{
	    				 s Property=PropertyList.GetAt(key)
	    				 s Property2=pl.GetAt(key)
		    				  s AddP="$ZCONVERT("
		    				  s AddP2=",""I"",""UTF8"")"

	    				 if ($lf(Property2,"%Date")>0) {
		    				  s AddP="$ZDATEH("
		    				  s AddP2=",4)"}
 						 //s TempCreate=TempCreate_$C(9)_"set "_ClassName_"."_Property_"=$ZCONVERT(obj."_Property_",""I"",""UTF8"")"_$C(10)
 						 s TempUpdate=TempUpdate_$C(9)_"set "_ClassName_"."_Property_"="_AddP_"obj."_Property_AddP2_$C(10)
	    				 
    					 //s TempUpdate=TempUpdate_$C(9)_"set "_ClassName_"."_Property_"=$ZCONVERT(obj."_Property_",""I"",""UTF8"")"_$C(10)
    					 w !, "формируем визуализирующие партиции"			 
						 s Partial=Partial_" {{"_ClassName_"."_Property_"}} </br>"
 						 }
 					s Partial=Partial_"</div>"_$$$t1_
							"<div class='col-lg-2'>"_$$$t1_
							"<button class='btn btn-default' ng-click='Delete("_ClassName_".ID)'><span class='glyphicon glyphicon-trash'></span></button>"_$$$t1_
							"<a class='btn btn-default' href='#/Update"_ClassName_"/{{"_ClassName_".ID}}'><span class='glyphicon glyphicon-refresh'></span></a>"_$$$t1_
							"</div></div></div>"	 
 						 d ..SaveToFile(partPath_"View"_ClassName_".html",Partial)
 			 		s TempUpdate=TempUpdate_$C(9)_"$$$THROWONERROR(st,"_ClassName_".%Save())"_$C(10)_$C(9)_"} catch ex{set st=ex.AsStatus()}"_$C(10)_$C(9)_"quit st"
 			s st=temp.Write(TempUpdate),TempUpdate=""
 			s st=##class(spg.Class).%CreateMethod(NameSpace,FullClassName,"Update","","%Status",temp,"Update "_FullClassName), st=temp.Clear()
 			s TempGet=$C(9)_"set sql=""select * from "_FullClassName_"  where ID=""_ID"_$C(10)_$C(9)_"do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql)"_$C(10)_$C(9)_"Q $$$OK"
 			s st=temp.Write(TempGet),TempGet=""
 			s st=##class(spg.Class).%CreateMethod(NameSpace,FullClassName,"Get","ID","%Status",temp,"Get "_FullClassName), st=temp.Clear()
 			s TempGetAll=$C(9)_"set sql=""select * from "_FullClassName_""""_$C(10)_$C(9)_"do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql)"_$C(10)_$C(9)_"Q $$$OK"
 			s st=temp.Write(TempGetAll),TempGetAll=""
 			s st=##class(spg.Class).%CreateMethod(NameSpace,FullClassName,"GetAll","","%Status",temp,"GetAll "_FullClassName), st=temp.Clear()
 			
 			s TempDelete=$C(9)_"Q ##class("_FullClassName_").%DeleteId(ID)"
 			s st=temp.Write(TempDelete),TempDelete=""
 			s st=##class(spg.Class).%CreateMethod(NameSpace,FullClassName,"Delete","ID","%Status",temp,"Delete "_FullClassName), st=temp.Clear()
			
			s XDATA=XDATA_$C(9)_$C(9)_"<Route Url=""/"_ClassName_"/Create"" Method=""POST"" 	Call="""_FullClassName_":Create""/>"_$C(10)_
			$C(9)_$C(9)_"<Route Url=""/"_ClassName_"/Update"" Method=""POST"" 	Call="""_FullClassName_":Update""/>"_$C(10)_
			$C(9)_$C(9)_"<Route Url=""/"_ClassName_"/GetAll"" Method=""GET"" 	Call="""_FullClassName_":GetAll""/>"_$C(10)_
			$C(9)_$C(9)_"<Route Url=""/"_ClassName_"/Get/:ID"" Method=""GET"" 	Call="""_FullClassName_":Get""/>"_$C(10)_
			$C(9)_$C(9)_"<Route Url=""/"_ClassName_"/Delete/:ID"" Method=""DELETE"" 	Call="""_FullClassName_":Delete""/>"_$C(10)
			d ##class(spg.Class).%Compile(NameSpace,FullClassName)
			w !,"*****"_$C(10)_FullClassName_$C(10)_"*******"
			
			s Factory=Factory_$$$t1_".factory('"_ClassName_"Factory',['$http',function($http){"_"return {"_$$$t2_
            "Create:function(data)   {return $http.post('/"_Broker_"/"_ClassName_"/Create',data);},"_$$$t2_
            "Update:function(data)   {return $http.post('/"_Broker_"/"_ClassName_"/Update',data);},"_$$$t2_
            "Delete:function(ID)   {return $http.delete('/"_Broker_"/"_ClassName_"/Delete/'+ID);},"_$$$t2_
            "Get:function(ID)      {return $http.get('/"_Broker_"/"_ClassName_"/Get/'+ID);},"_$$$t2_
            "GetAll:function()      {return $http.get('/"_Broker_"/"_ClassName_"/GetAll');}"_$$$t2_
            "}}])"
            
            s Controller=Controller_" function View"_ClassName_"Ctrl($rootScope,$scope,$routeParams,"_ClassName_"Factory){"_$$$t2_
    		"$scope.Get"_ClassName_"=function(){"_$$$t2_
            ""_ClassName_"Factory.GetAll().success(function(data){"_"$scope."_ClassName_"s=data.children;"_"});}; "_$$$t2_
			"$scope.Get"_ClassName_"();"_
			"$scope.Delete=function(ID){"_ClassName_"Factory.Delete(ID).success(function(){$scope.Get"_ClassName_"();})};"_$$$t1_
			"} "_$C(10)_
			
			" function Create"_ClassName_"Ctrl($rootScope,$scope,$routeParams,"_ClassName_"Factory){"_$$$t2_
			"$scope.Submit=function(data){ "_ClassName_"Factory.Create(data).success(function(){location.href='#/"_ClassName_"';}); }"_$$$t2_
			"} "_$C(10)_
			
			" function Update"_ClassName_"Ctrl($rootScope,$scope,$routeParams,"_ClassName_"Factory){"_$$$t2_
			"$scope.Submit=function(data){ "_ClassName_"Factory.Update(data).success(function(){location.href='#/"_ClassName_"';}); };"_$$$t2_
			"$scope.Get=function(){"_$$$t2_
			""_ClassName_"Factory.Get($routeParams.ID).success(function(data){"_"$scope."_ClassName_"=data.children[0];"_"});"_$$$t2_
			"}"_$$$t2_"$scope.Get();"_$$$t2_
			"} "_$C(10)
			
			s App=App_$C(10,9)_"when('/"_ClassName_"',{templateUrl: 'partials/View"_ClassName_".html', controller: View"_ClassName_"Ctrl})."_$C(10,9)
			_"when('/Create"_ClassName_"',{templateUrl: 'partials/"_ClassName_".html', controller: Create"_ClassName_"Ctrl})."_$C(10,9)
			_"when('/Update"_ClassName_"/:ID',{templateUrl: 'partials/"_ClassName_".html', controller: Update"_ClassName_"Ctrl})."_$C(10,9)
			
			s menu=menu_"<li><a href='#/"_ClassName_"'>"_ClassName_"</a></li>"_$C(10)
			
			
		}
		s App=App_"otherwise({redirectTo: '/"_ClassName_"'});}])"_$C(10)
		s App=App_".config(function($datepickerProvider) { angular.extend($datepickerProvider.defaults, { dateFormat: 'dd/MM/yyyy', startWeek: 1 }); }) .config(function($timepickerProvider) { angular.extend($timepickerProvider.defaults, { timeFormat: 'HH:mm:ss', length: 4 }); })"
		s menu=menu_"</ul>"_$C(10)
		s XDATA=XDATA_$C(9)_"</Routes>"_$C(10),st=##class(spg.Class).%CreateClass(NameSpace,"WEB.Broker","%CSP.REST")
		s st= ##class(spg.Class).%Compile(NameSpace,"WEB.Broker"),st=temp.Write(XDATA) //, XDATA=""
		zn NameSpace
		s XD=##class(%Dictionary.XDataDefinition).%New("WEB.Broker"),XD.Name="UrlMap", st=XD.Data.Write(XDATA),st=XD.%Save()
		zn ..#%DefaultNameSpace

		s st= ##class(spg.Class).%Compile(NameSpace,"WEB.Broker"),st=temp.Clear()
  
 		d ..SaveToFile(jsPath_"controller.js",Controller)
		d ..SaveToFile(jsPath_"factory.js",Factory)
		d ..SaveToFile(jsPath_"app.js",App)
		d ..SaveToFile(partPath_"menu.html",menu)
		s $namespace=ns
		/*
		w !,"**********************************"
		w !,"проект доступен по адресу имя_сервера "_..GetDefault(NameSpace)_"/"_Package_"/index.html"
		w !,"необходимо связать брокер на адрес /"_WebApp
		w !,"задать Класс-обработчик 'WEB.Broker'"_$C(10)_"ВНИМАНИЕ!!! Регистр имеет значение!"
		w !,"**********************************"
		*/
		// todo: возвращать адреcc ??
		Q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^spg.SpikeD</DataLocation>
<DefaultData>SpikeDefaultData</DefaultData>
<IdLocation>^spg.SpikeD</IdLocation>
<IndexLocation>^spg.SpikeI</IndexLocation>
<StreamLocation>^spg.SpikeS</StreamLocation>
<Data name="SpikeDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="spg.TestPage">
<Description>
Тестим инклуд чего то в HTML</Description>
<Super>%Persistent,%CSP.Page</Super>
<TimeChanged>63425,50750</TimeChanged>
<TimeCreated>63421,62220.744114</TimeCreated>

<Parameter name="CONTENTTYPE">
<Default>text/html</Default>
</Parameter>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 d ..htmlTest(10)
 q $$$OK
]]></Implementation>
</Method>

<Method name="htmlTest">
<ClassMethod>1</ClassMethod>
<FormalSpec>yy</FormalSpec>
<Implementation><![CDATA[
 
  For i=1:1:yy{
  &html< 
  
  <h1>x is #(i)# y #(yy)#</h1>
  
  >
  }
]]></Implementation>
</Method>

<Method name="TestFile">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
		S stream=##class(%FileCharacterStream).%New()
		S stream.Filename="http://www.akvant.pro/scrumbler/index.html"
		//читаем весь файл
		s index="<!DOCTYPE html>"_$C(10)_"<html ng-app='TEST'>"_$C(10)
		S index=index_stream.Read(stream.Size)
		d ..SaveToFile("c:\temp\index.html",index)
]]></Implementation>
</Method>

<Method name="SaveToFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>filePath:%String,body:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		s fileM=##class(%Stream.FileBinary).%New()
		s fileM.Filename=filePath
		s st=fileM.Write(body)
		s st=fileM.%Save()
		k fileM
 		q $$$OK
]]></Implementation>
</Method>

<Method name="wTemplate">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&params:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 &html<<div>#(params)#</div><script language="javascript"></script>>
 &js<var z=#(params)#;>
 Q ""
]]></Implementation>
</Method>

<Method name="Generate">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  o filename:"WNUK\CP1251\" ;не помню в какую сторону \
  u filename 
  w !,"3Abra kadabra",!
  d ..wTemplate("Hello")
  w !,"2Ahalai mahalay",!
  c filename
  w !,"ZZZZ",!
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^spg.TestPageD</DataLocation>
<DefaultData>TestPageDefaultData</DefaultData>
<IdLocation>^spg.TestPageD</IdLocation>
<IndexLocation>^spg.TestPageI</IndexLocation>
<StreamLocation>^spg.TestPageS</StreamLocation>
<Data name="TestPageDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>children</Value>
</Value>
<Value name="3">
<Value>disabled</Value>
</Value>
<Value name="4">
<Value>%partial</Value>
</Value>
<Value name="5">
<Value>error</Value>
</Value>
<Value name="6">
<Value>cellAlign</Value>
</Value>
<Value name="7">
<Value>cellVAlign</Value>
</Value>
<Value name="8">
<Value>%page</Value>
</Value>
<Value name="9">
<Value>labelPosition</Value>
</Value>
<Value name="10">
<Value>groupStyle</Value>
</Value>
<Value name="11">
<Value>cellStyle</Value>
</Value>
<Value name="12">
<Value>groupClass</Value>
</Value>
<Value name="13">
<Value>%condition</Value>
</Value>
<Value name="14">
<Value>%resource</Value>
</Value>
<Value name="15">
<Value>%import</Value>
</Value>
<Value name="16">
<Value>%includeFiles</Value>
</Value>
<Value name="17">
<Value>index</Value>
</Value>
<Value name="18">
<Value>id</Value>
</Value>
<Value name="19">
<Value>dragEnabled</Value>
</Value>
<Value name="20">
<Value>aux</Value>
</Value>
<Value name="21">
<Value>onbeforedrag</Value>
</Value>
<Value name="22">
<Value>ondrag</Value>
</Value>
<Value name="23">
<Value>onafterdrag</Value>
</Value>
<Value name="24">
<Value>ondrop</Value>
</Value>
<Value name="25">
<Value>containerStyle</Value>
</Value>
<Value name="26">
<Value>align</Value>
</Value>
<Value name="27">
<Value>useSVG</Value>
</Value>
<Value name="28">
<Value>inlineSVG</Value>
</Value>
<Value name="29">
<Value>height</Value>
</Value>
<Value name="30">
<Value>isSoftModal</Value>
</Value>
<Value name="31">
<Value>enclosingClass</Value>
</Value>
<Value name="32">
<Value>enclosingStyle</Value>
</Value>
<Value name="33">
<Value>lastModalIndex</Value>
</Value>
<Value name="34">
<Value>%xmlOutputMode</Value>
</Value>
<Value name="35">
<Value>SVGClassList</Value>
</Value>
<Value name="36">
<Value>%UserPackageList</Value>
</Value>
<Value name="37">
<Value>UserSVGPackageList</Value>
</Value>
<Value name="38">
<Value>backgroundTimerInterval</Value>
</Value>
<Value name="39">
<Value>zenPersistentPopup</Value>
</Value>
<Value name="40">
<Value>onoverlay</Value>
</Value>
<Value name="41">
<Value>designMode</Value>
</Value>
<Value name="42">
<Value>cssLevel</Value>
</Value>
<Value name="43">
<Value>useSoftModals</Value>
</Value>
<Value name="44">
<Value>cellSize</Value>
</Value>
<Value name="45">
<Value>composite</Value>
</Value>
<Value name="46">
<Value>dragAndDrop</Value>
</Value>
<Value name="47">
<Value>dropEnabled</Value>
</Value>
<Value name="48">
<Value>dynamic</Value>
</Value>
<Value name="49">
<Value>hidden</Value>
</Value>
<Value name="50">
<Value>hint</Value>
</Value>
<Value name="51">
<Value>hintClass</Value>
</Value>
<Value name="52">
<Value>hintStyle</Value>
</Value>
<Value name="53">
<Value>isPopup</Value>
</Value>
<Value name="54">
<Value>label</Value>
</Value>
<Value name="55">
<Value>labelClass</Value>
</Value>
<Value name="56">
<Value>labelDisabledClass</Value>
</Value>
<Value name="57">
<Value>labelStyle</Value>
</Value>
<Value name="58">
<Value>layout</Value>
</Value>
<Value name="59">
<Value>name</Value>
</Value>
<Value name="60">
<Value>nextIndex</Value>
</Value>
<Value name="61">
<Value>onclick</Value>
</Value>
<Value name="62">
<Value>onhide</Value>
</Value>
<Value name="63">
<Value>onrefresh</Value>
</Value>
<Value name="64">
<Value>onshow</Value>
</Value>
<Value name="65">
<Value>onupdate</Value>
</Value>
<Value name="66">
<Value>overlayMode</Value>
</Value>
<Value name="67">
<Value>parent</Value>
</Value>
<Value name="68">
<Value>popupParent</Value>
</Value>
<Value name="69">
<Value>renderFlag</Value>
</Value>
<Value name="70">
<Value>showLabel</Value>
</Value>
<Value name="71">
<Value>slice</Value>
</Value>
<Value name="72">
<Value>title</Value>
</Value>
<Value name="73">
<Value>tuple</Value>
</Value>
<Value name="74">
<Value>valign</Value>
</Value>
<Value name="75">
<Value>visible</Value>
</Value>
<Value name="76">
<Value>width</Value>
</Value>
<Value name="77">
<Value>window</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="spg.Util">
<Super>%Persistent</Super>
<TimeChanged>63425,50750</TimeChanged>
<TimeCreated>63425,50531.711523</TimeCreated>

<Parameter name="%WorkNameSpace">
</Parameter>

<Parameter name="%DefaultNameSpace">
<Expression>$namespace</Expression>
</Parameter>

<Method name="%NameSpaceList">
<ClassMethod>1</ClassMethod>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[
	set TempList=##class(%ArrayOfDataTypes).%New()
	d List^%SYS.NAMESPACE(.nslist,0)
	Set ns=""
	Set ns=$O(nslist(ns))
	set i=0
	while ns'=""{
		do TempList.SetAt(ns,i)
		Set ns=$O(nslist(ns))
		set i=i+1				
		}
	Quit TempList
]]></Implementation>
</Method>

<Method name="%SubClassList">
<ClassMethod>1</ClassMethod>
<FormalSpec>%WorkNameSpace,%Class:%String="",%SystemClass:%Boolean=0</FormalSpec>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[
	ZN %WorkNameSpace
	set TempList=##class(%ArrayOfDataTypes).%New()
	set ClassList=##class(%ResultSet).%New("%ClassDefinition:ClassInfo")
 	do ClassList.Execute(%Class)
 	set i=0
 	   	while ClassList.Next() 
 	   {
	 	   if ('%SystemClass )
	 	   {
		 	   if (($F(ClassList.Get("Name"),"%")=0) && ($F(ClassList.Get("Name"),"INFORMATION.SCHEMA")=0) && ($F(ClassList.Get("Name"),"sc.min")=0) && ($F(ClassList.Get("Name"),"WEB.Broker")=0)){
   	 	   		do TempList.SetAt(ClassList.Get("Name"),i)
 				set i=i+1
		 	   }
		 	}
		   else
		   {
				do TempList.SetAt(ClassList.Get("Name"),i)
 				set i=i+1
			 }
 	   }
	ZN ..#%DefaultNameSpace
	Quit TempList
]]></Implementation>
</Method>

<Method name="%ListPropertiesOfClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>%WorkNameSpace,%Class:%String</FormalSpec>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[
	ZN %WorkNameSpace
	set TempList=##class(%ArrayOfDataTypes).%New()
	set Class=##class(%ClassDefinition).%OpenId(%Class)
	set key=""
    do Class.Properties.GetNext(.key)
    while key'="" 
    	{
	    	set Property=$LB(Class.Properties.GetAt(key).Name,
	    			  	     Class.Properties.GetAt(key).Type,
	    			  		 Class.Properties.GetAt(key).Description,
	    			  		 Class.Properties.GetAt(key).Collection,
	    			  		 Class.Properties.GetAt(key).InitialExpression)
	     
	     do TempList.SetAt(Class.Properties.GetAt(key).Name,key)
		 
	     d Class.Properties.GetNext(.key)	
	     }
   	ZN ..#%DefaultNameSpace
   	//set $namespace = sn
   	//ZW TempList
	Quit TempList
]]></Implementation>
</Method>

<Method name="ListPropertiesOfClass2">
<ClassMethod>1</ClassMethod>
<FormalSpec>%WorkNameSpace,%Class:%String</FormalSpec>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[
	
	ZN %WorkNameSpace
	set TempList=##class(%ArrayOfDataTypes).%New()
	set Class=##class(%ClassDefinition).%OpenId(%Class)
	set key=""
    do Class.Properties.GetNext(.key)
    while key'="" 
    	{
	    	set Property=$LB(Class.Properties.GetAt(key).Name,
	    			  	     Class.Properties.GetAt(key).Type,
	    			  		 Class.Properties.GetAt(key).Description,
	    			  		 Class.Properties.GetAt(key).Collection,
	    			  		 Class.Properties.GetAt(key).InitialExpression)
	     
	     do TempList.SetAt(Property,key)
		 
	     d Class.Properties.GetNext(.key)	
	     }
   	ZN ..#%DefaultNameSpace
   	//set $namespace = sn
   	//ZW TempList
	Quit TempList
]]></Implementation>
</Method>

<Method name="%OpenFile">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%WriteFile">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%CheckDir">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^spg.UtilD</DataLocation>
<DefaultData>UtilDefaultData</DefaultData>
<IdLocation>^spg.UtilD</IdLocation>
<IndexLocation>^spg.UtilI</IndexLocation>
<StreamLocation>^spg.UtilS</StreamLocation>
<Data name="UtilDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="spg.generator">
<Super>%Persistent</Super>
<TimeChanged>63425,54685.025804</TimeChanged>
<TimeCreated>63416,34167.120781</TimeCreated>

<Method name="CreateDB">
<Description><![CDATA[
from example 
http://localhost:57772/csp/documatic/%25CSP.Documatic.cls?LIBRARY=%25sys&CLASSNAME=%25Library.Persistent&CSPCHD=001000000000nKXcBK2T2y0000iNbZdooKtihpdM4Xu2KP1g--&CSPSHARE=1]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Name:%String</FormalSpec>
<Implementation><![CDATA[
 // w !,"hi2all",!
 s ns = $namespace, $namespace="%SYS"
 Set LowName = $ZCVT(Name,"L")

 //Create directories
 s Path = "c:\temp\__"_Name
 s PathDB = Path_"\DB"
 s PathWEB = Path_"\WEB"
 do $zu(140,9,Path)
 do $zu(140,9,PathDB)
 do $zu(140,9,PathWEB)
 
 // Create DataBase File
 s Status=##Class(SYS.Database).CreateDatabase(PathDB)
 i '$$$ISOK(Status) w !,"First Error="_$SYSTEM.Status.GetErrorText(Status)
 s Properties("Directory")=PathDB
 s Properties("MountRequired")=1
 
 // Mount database to Cache
 s Status=##Class(Config.Databases).Create(Name,.Properties)
 i '$$$ISOK(Status) w !,"First Error="_$SYSTEM.Status.GetErrorText(Status)
  s Properties("MountRequired")=1
 s Status=##Class(Config.Databases).Modify(Name,.Properties)
 
 // Create NameSpace
 			Set nsProperties("Globals") = Name
			Set nsProperties("Library") = "CACHELIB"
			Set nsProperties("Routines") = Name
			Set nsProperties("SysGlobals") = "CACHESYS"
			Set nsProperties("SysRoutines") = "CACHESYS"
			Set nsProperties("TempGlobals") = "CACHETEMP"
			Set tSC = ##Class(Config.Namespaces).Create(Name,.nsProperties)
			If $$$ISERR(tSC) throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)
 // Create web apps
 			Set tSC = ##Class(Security.System).Get(,.secProperties)
 			// default
			Set cspProperties("AutheEnabled") = 64 // secProperties("AutheEnabled")
			Set cspProperties("NameSpace") = Name
			Set cspProperties("Path") = PathWEB
			Set cspProperties("IsNameSpaceDefault") = 1
			Set tSC = ##Class(Security.Applications).Create("/web/"_LowName,.cspProperties)
			If $$$ISERR(tSC) throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)

 			// broker
			Set cspProperties("AutheEnabled") = 64
			Set cspProperties("NameSpace") = Name
			Set cspProperties("DispatchClass") = "WEB.Broker"
			Set cspProperties("IsNameSpaceDefault") = 0
			Set tSC = ##Class(Security.Applications).Create("/broker/"_LowName,.cspProperties)
			If $$$ISERR(tSC) throw ##Class(%Exception.StatusException).CreateFromStatus(tSC)
 
 s $namespace=ns 

 Q $$$OK
]]></Implementation>
</Method>

<Method name="CreateClass">
<Description>
Cоздание класса</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>NameSpace,obj</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    //TODO: ПРИМЕРЫ ЗАПРОСОВ
    /*
    data: { namespace: "MDG-DEV",
          nameClass: "Example.Studio",
          Super: "%Persistent,%Populate",
          Abstract: "0",
          Description: "This is TestClass"
          }
    */
    //$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
    //zw obj
    set sn = $namespace
    set $namespace = NameSpace //obj.namespace
    set o = ##class(%Dictionary.ClassDefinition).%New(obj.nameClass)
    //Super - тип класса, то что идет после Extends (%Populate,%Persistent, др.классы)
    set o.Super = obj.Super
    //Абстрактный или нет (0 или 1)
    set o.Abstract = obj.Abstract
    //Описание
    set o.Description = obj.Description
    set status = o.%Save() 
    set $namespace = sn
    q $$$OK
]]></Implementation>
</Method>

<Method name="CreateProperty">
<ClassMethod>1</ClassMethod>
<FormalSpec>obj</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
      //TODO: ПРИМЕРЫ ЗАПРОСОВ
      /*
      data: { namespace: "MDG-DEV",
          nameClass: "Example.Studio",
          nameProperty: "test123",
          Type: "%String",
          Relationship: "0",
          Required: "1",
          Calculated: "0"
          }
          */
      //$$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
      set sn = $namespace
      set $namespace = obj.namespace
      set property=##class(%Dictionary.PropertyDefinition).%New(obj.nameClass)
      //zw property
      set property.Name = obj.nameProperty
      //Описание
      set property.Description = $ZCONVERT(obj.Description,"I","UTF8")
      //Тип свойства (н-р, %Text)
      //zw property
      set property.Type = obj.Type
      
      //w !,property.Type
      //do ##class(MDG.Request).GetParameters()
       // Коллекция (array или list)
      set property.Collection = obj.Collection
      //Отношение (0 или 1)
      set property.Relationship = obj.Relationship
      set property.Required = obj.Required
      set property.Calculated = obj.Calculated
      // указываем формат даты для корректного хранения
       if (property.Type ="%Date"){ d property.Parameters.SetAt(4,"FORMAT") }
      set status=property.%Save()
      //w !,"propid begin- ",property.%Id()," - end",!
      set $namespace = sn
      q $$$OK
]]></Implementation>
</Method>

<Method name="Generate">
<ClassMethod>1</ClassMethod>
<FormalSpec>NameSpace,Package</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
      w !,NameSpace," ",Package,!
      
      do ##class(Template.Spike).CreateCacheMethods(NameSpace,Package)
      q $$$OK
]]></Implementation>
</Method>

<Method name="Generate2">
<ClassMethod>1</ClassMethod>
<FormalSpec>NameSpace,Package</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
      //создаём БД
      do ..CreateDB(NameSpace)
      w !,"base created"
      
      $$$THROWONERROR(st,##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1))
 		// получаем список классов и создаём их
 		for i=1:1:obj.Size {
			set Class= obj.Oref(i)
			w !,"-  ",Class.Properties.Size," p size = ",Class.Name
            s Class.namespace = NameSpace
            s Class.nameClass = Package_"."_Class.Name
            s Class.Super =  "%Persistent,%Populate"
            s Class.Abstract = "0"
            s Class.Description = "This is auto generated Class by SPG"
			//zw Class
			do ..CreateClass(NameSpace,Class)
		      // получаем список свойств класса
		      for j=1:1:Class.Properties.Size {
			      //zw Property
			      set Property = Class.Properties.Oref(j)
                  s Property.namespace = Class.namespace
                  s Property.nameClass = Class.nameClass
                  s Property.nameProperty = Property.Name
			      //w !,"1"
			      //if (Property.Type ="%Date"){ d Property.Parametr.SetAt("FORMAT",4) }
                  s Property.Relationship = "0"
                  s Property.Required = "0"
                  s Property.Calculated = "0"
                  do ..CreateProperty(Property)
			      
			      //w !,"-- j --",Property.Name,!
 					}
 				}
 do ##class(spg.Spike).CreateCacheMethods(NameSpace,Package) 
 q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^spg.generatorD</DataLocation>
<DefaultData>generatorDefaultData</DefaultData>
<IdLocation>^spg.generatorD</IdLocation>
<IndexLocation>^spg.generatorI</IndexLocation>
<StreamLocation>^spg.generatorS</StreamLocation>
<Data name="generatorDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="spg.htmlTemplates">
<Super>%Persistent</Super>
<TimeChanged>63425,52526.023907</TimeChanged>
<TimeCreated>63425,50324.76545</TimeCreated>

<Method name="IndexT">
<ClassMethod>1</ClassMethod>
<FormalSpec>path,app</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 &html<<!DOCTYPE html>
<html ng-app='#(app)#'>
<head lang='en'>
<meta charset='UTF-8'>
<script src='#(path)#lib/jquery/jquery-2.1.1.min.js'></script>
<link href='#(path)#css/bootstrap/css/bootstrap.min.css' rel='stylesheet'>
<script src='#(path)#css/bootstrap/js/bootstrap.min.js'></script>
<title>#(app)#.WEB Auto Project</title>
</head>
<body>
<script src='#(path)#lib/angular/angular.min.js'></script>
<script src='#(path)#lib/angular/angular-route.min.js'></script>
<script src='#(path)#lib/angular/angular-resource.min.js'></script>
<script src='#(path)#lib/angular/angular-cookies.min.js'></script>
<script src='#(path)#lib/angular/angular-sanitize.min.js'></script>
<script src='#(path)#lib/angular/angular-mocks.js'></script>
<script src='#(path)#lib/angular/angular-loader.min.js'></script>
<script src='#(path)#lib/angular/angular-animate.min.js'></script>
<script src='#(path)#lib/angular-strap/angular-strap.min.js'></script>
<script src='#(path)#lib/angular-strap/angular-strap.tpl.min.js'></script>
<script src='js/controller.js'></script>
<script src='js/factory.js'></script>
<script src='js/app.js'>
</script>
<div class='row'>
	<div class='col-lg-2' ng-include="'partials/menu.html'"></div>
	<div class='col-lg-10' ng-view></div>
</div>
</body>
</html> 
 >
 Q ""
]]></Implementation>
</Method>

<Method name="GenerateIndex">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename,path,app</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  o filename:"WNUK\CP1251\" ;не помню в какую сторону \
  u filename 
  d ..IndexT(path,app)
  c filename
  w !,"***********************************",!
  w !,filename,!,path,!,app,!
  w !,"***********************************",!
  q $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^spg.htmlTemplatesD</DataLocation>
<DefaultData>htmlTemplatesDefaultData</DefaultData>
<IdLocation>^spg.htmlTemplatesD</IdLocation>
<IndexLocation>^spg.htmlTemplatesI</IndexLocation>
<StreamLocation>^spg.htmlTemplatesS</StreamLocation>
<Data name="htmlTemplatesDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
